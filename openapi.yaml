openapi: 3.1.0
info:
  title: Turnos de Salud Ambulatoria API
  version: 1.0.0
  description: API mínima para gestionar pacientes y reservar turnos.
servers:
  - url: http://localhost:8000/api/v1
security:
  - bearerAuth: []

tags:
  - name: Patients
  - name: Appointments

paths:
  /patients:
    get:
      tags: [Patients]
      summary: Listar pacientes
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Patient" }
    post:
      tags: [Patients]
      summary: Crear paciente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatientCreate"
            examples:
              ejemplo:
                value:
                  fullName: "Ana Gómez"
                  email: "ana@example.com"
                  phone: "+54-9-351-1111111"
      responses:
        "201":
          description: Creado
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Patient" }

  /appointments:
    post:
      tags: [Appointments]
      summary: Reservar turno (transacción)
      description: Valida disponibilidad, crea el turno confirmado y dispara recordatorio asincrónico.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AppointmentCreate" }
            examples:
              ejemplo:
                value:
                  patientId: "0d9b8c1a-8f6a-4c6a-9f3d-5a1b2c3d4e5f"
                  professionalId: "7bf3a2e1-9cd0-4b88-8c6f-2d1e0a9b7c55"
                  start: "2025-11-02T13:00:00Z"
                  end: "2025-11-02T13:30:00Z"
      responses:
        "201":
          description: Turno confirmado
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Appointment" }
              examples:
                ok:
                  value:
                    id: "5c7d0f0e-5bcb-4b2d-8d1d-6f2d92c4a111"
                    patientId: "0d9b8c1a-8f6a-4c6a-9f3d-5a1b2c3d4e5f"
                    professionalId: "7bf3a2e1-9cd0-4b88-8c6f-2d1e0a9b7c55"
                    start: "2025-11-02T13:00:00Z"
                    end: "2025-11-02T13:30:00Z"
                    status: "CONFIRMED"
                    createdAt: "2025-10-21T20:10:00Z"
                    updatedAt: "2025-10-21T20:10:00Z"
        "400":
          description: Error de validación o solapamiento
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

  /appointments/{id}:
    get:
      tags: [Appointments]
      summary: Obtener turno por ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { $ref: "#/components/schemas/UUID" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Appointment" }
        "404":
          description: No encontrado
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Error" }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UUID:
      type: string
      format: uuid
    ISODateTime:
      type: string
      format: date-time

    Patient:
      type: object
      required: [id, fullName, email, createdAt]
      properties:
        id: { $ref: "#/components/schemas/UUID" }
        fullName: { type: string, minLength: 1 }
        email: { type: string, format: email }
        phone: { type: string, nullable: true }
        createdAt: { $ref: "#/components/schemas/ISODateTime" }

    PatientCreate:
      type: object
      required: [fullName, email]
      properties:
        fullName: { type: string }
        email: { type: string, format: email }
        phone: { type: string, nullable: true }

    Appointment:
      type: object
      required: [id, patientId, professionalId, start, end, status, createdAt]
      properties:
        id: { $ref: "#/components/schemas/UUID" }
        patientId: { $ref: "#/components/schemas/UUID" }
        professionalId: { $ref: "#/components/schemas/UUID" }
        start: { $ref: "#/components/schemas/ISODateTime" }
        end: { $ref: "#/components/schemas/ISODateTime" }
        status:
          type: string
          enum: [PENDING, CONFIRMED, CANCELLED]
        createdAt: { $ref: "#/components/schemas/ISODateTime" }
        updatedAt:
          allOf:
            - $ref: "#/components/schemas/ISODateTime"
          nullable: true

    AppointmentCreate:
      type: object
      required: [patientId, professionalId, start, end]
      properties:
        patientId: { $ref: "#/components/schemas/UUID" }
        professionalId: { $ref: "#/components/schemas/UUID" }
        start: { $ref: "#/components/schemas/ISODateTime" }
        end: { $ref: "#/components/schemas/ISODateTime" }

    Error:
      type: object
      required: [message]
      properties:
        message: { type: string }
        detail: { type: string, nullable: true }
